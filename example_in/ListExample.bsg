import IO;
import List;
import StringEx;
import Cat;
import Dog;
import Animal;
import Equatable;
import ListEx;

[Singleton]
class ListExample {
    [Main]
    main(): Void {
        var l: List = new List();

        IO.println("Add two cats:");
        var i: Int = 0;
        while(i < 2) {
            l.add(new Cat() as Any);
            i = i + 1;
        }

        IO.println("Replace first cat with dog:");
        l.set(0, new Dog() as Any);

        IO.println("List with Cats and dogs:");
        i = 0;
        while(i < 2) {
            IO.println((l.get(i) as Animal).talk());
            i = i + 1;
        }

        IO.println("Remove the first animal (dog):");
        l.remove(0);

        IO.println("List with just 1 cat:");
        i = 0;
        while(i < 1) {
            IO.println((l.get(i) as Animal).talk());
            i = i + 1;
        }

        var catStringsList: List = new List();
        catStringsList.add("Cat" as Any);
        catStringsList.add("Dog" as Any);
        catStringsList.add("Dog" as Any);
        catStringsList.add("Cat" as Any);
        catStringsList.add("Cat" as Any);
        IO.println("Cat strings list: ".plus(StringEx.ofAny(catStringsList as Any)));
        var numCats: Int = catStringsList
            |> ListEx.map(it, stringToAnimal)
            |> ListEx.fold(it, 0 as Any, countCats)
            |> it as Int;
        IO.println("Number of cats: ".plus(StringEx.ofInt(numCats)));
    }

    stringToAnimal(value: Any): Any {
        if(value is Equatable && (value as Equatable).equals("Cat" as Equatable)) {
            return new Cat() as Any;
        }
        return new Dog() as Any;
    }

    countCats(acc: Any, value: Any): Any {
        if((value is Cat)) {
            return ((acc as Int) + 1) as Any;
        }
        return acc;
    }
}