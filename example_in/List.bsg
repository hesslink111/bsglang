h '#include <string.h>';
import StringEx;
import System;
import ToString;
import String;
import StringBuilder;

class List: ToString {
    var arr: Opaque;
    var size: Int;
    var capacity: Int;

    init(): Void {
        c "this->arr = allocate(10 * sizeof(struct BSG_Any));";
        this.capacity = 10;
        this.size = 0;
    }

    add(value: <E: Any>): Void {
        if(this.size + 1 > this.capacity) {
            var newCapacity: Int = ((this.capacity * 3) / 2);
            c "this->arr = realloc(this->arr, newCapacity * sizeof(struct BSG_Any));";
            capacity = newCapacity;
        }

        c "((struct BSG_Any*) this->arr)[this->size] = value;";

        c "if(value.type == BSG_Any_ContentType__Instance && value.content.instance) {";
        c "value.content.instance->baseInstance->baseClass->retain(value.content.instance->baseInstance);";
        c "} else if(value.type == BSG_Any_ContentType__Method && value.content.method.this) {";
        c "value.content.method.this->baseInstance->baseClass->retain(value.content.method.this->baseInstance);";
        c "}";

        size = size + 1;
    }

    set(index: Int, value: <E: Any>): Void {
        if(index < 0 || index >= size) {
            System.error("Index out of bounds: i: ".plus(StringEx.ofInt(index))
                .plus(", size: ").plus(StringEx.ofInt(size)));
        }

        c "if(value.type == BSG_Any_ContentType__Instance && value.content.instance) {";
        c "value.content.instance->baseInstance->baseClass->retain(value.content.instance->baseInstance);";
        c "} else if(value.type == BSG_Any_ContentType__Method && value.content.method.this) {";
        c "value.content.method.this->baseInstance->baseClass->retain(value.content.method.this->baseInstance);";
        c "}";

        c "struct BSG_Any prevVal = ((struct BSG_Any*)this->arr)[index];";

        c "if(prevVal.type == BSG_Any_ContentType__Instance && prevVal.content.instance) {";
        c "prevVal.content.instance->baseInstance->baseClass->release(prevVal.content.instance->baseInstance);";
        c "} else if(prevVal.type == BSG_Any_ContentType__Method && prevVal.content.method.this) {";
        c "prevVal.content.method.this->baseInstance->baseClass->release(prevVal.content.method.this->baseInstance);";
        c "}";

        c "((struct BSG_Any*)this->arr)[index] = value;";
    }

    get(index: Int): <E: Any> {
        if(index < 0 || index >= size) {
            System.error("Index out of bounds: i: ".plus(StringEx.ofInt(index))
                .plus(", size: ").plus(StringEx.ofInt(size)));
        }

        var value: Any;
        c "value = ((struct BSG_Any*)this->arr)[index];";

        c "if(value.type == BSG_Any_ContentType__Instance && value.content.instance) {";
        c "value.content.instance->baseInstance->baseClass->retain(value.content.instance->baseInstance);";
        c "} else if(value.type == BSG_Any_ContentType__Method && value.content.method.this) {";
        c "value.content.method.this->baseInstance->baseClass->retain(value.content.method.this->baseInstance);";
        c "}";

        return value;
    }

    remove(index: Int): Void {
        if(index < 0 || index >= size) {
            System.error("Index out of bounds: i: ".plus(StringEx.ofInt(index))
                .plus(", size: ").plus(StringEx.ofInt(size)));
        }

        var value: Any;
        c "value = ((struct BSG_Any*)this->arr)[index];";

        c "if(value.type == BSG_Any_ContentType__Instance && value.content.instance) {";
        c "value.content.instance->baseInstance->baseClass->release(value.content.instance->baseInstance);";
        c "} else if(value.type == BSG_Any_ContentType__Method && value.content.method.this) {";
        c "value.content.method.this->baseInstance->baseClass->release(value.content.method.this->baseInstance);";
        c "}";

        var numToCopy: Int = size - index;
        c "memcpy(((struct BSG_Any*)this->arr) + index, ((struct BSG_Any*)this->arr) + index + 1, numToCopy * sizeof(struct BSG_Any));";
        size = size - 1;
    }

    clear(): Void {
        deinit();
        init();
    }

    releaseAll(): Void {
        var i: Int = 0;
        while(i < size) {
            var value: Any;
            c "value = ((struct BSG_Any*)this->arr)[i];";

            c "if(value.type == BSG_Any_ContentType__Instance && value.content.instance) {";
            c "value.content.instance->baseInstance->baseClass->release(value.content.instance->baseInstance);";
            c "} else if(value.type == BSG_Any_ContentType__Method && value.content.method.this) {";
            c "value.content.method.this->baseInstance->baseClass->release(value.content.method.this->baseInstance);";
            c "}";

            i = i + 1;
        }
    }

    forEach(f: (<E: Any>)->Void): Void {
        var i: Int = 0;
        while(i < size) {
            f(get(i));
            i = i + 1;
        }
    }

    forEachIndexed(f: (Int,<E: Any>)->Void): Void {
        var i: Int = 0;
        while(i < size) {
            f(i, get(i));
            i = i + 1;
        }
    }

    toString(): String {
        var builder: StringBuilder = new StringBuilder().append("List(");
        var i: Int = 0;
        while(i < size) {
            if(i > 0) {
                builder.append(",");
            }
            builder.append(StringEx.ofAny(get(i)));
            i = i + 1;
        }
        builder.append(")");
        return builder.toString();
    }

    deinit(): Void {
        releaseAll();
        c "deallocate(this->arr);";
    }
}