h "#include <stdio.h>";
h "#include <string.h>";
import String;
import ToString;
import Math;

[Singleton]
class StringEx {
    var t: String;
    var f: String;

    init(): Void {
        t = new String();
        c 'this->t->cStr = "true";';
        t.length = 4;
        t.isLiteral = true;

        f = new String();
        c 'this->f->cStr = "false";';
        f.length = 5;
        t.isLiteral = true;
    }

    ofBool(b: Bool): String {
        if(b) {
            return t;
        }
        return f;
    }

    ofInt(i: Int): String {
        var str: String = new String();
        c 'str->cStr = allocate(12);';
        c 'snprintf(str->cStr, 12, "%d", i);';
        c 'str->length = (BSG_Int) strlen(str->cStr);';
        str.isLiteral = false;
        return str;
    }

    ofOpaque(i: Opaque): String {
        var str: String = new String();
        c "str->cStr = allocate(12);";
        c 'snprintf(str->cStr, 12, "%p", i);';
        c 'str->length = (BSG_Int) strlen(str->cStr);';
        str.isLiteral = false;
        return str;
    }

    ofChar(value: Char): String {
        var str: String = new String();
        c "str->cStr = allocate(2);";
        c "((char*)str->cStr)[0] = value;";
        c "((char*)str->cStr)[1] = 0;";
        str.length = 1;
        str.isLiteral = false;
        return str;
    }

    ofAny(value: Any): String {
        if(value is String) {
            return value as String;
        }
        if(value is ToString) {
            return (value as ToString).toString();
        }
        return "Any";
    }

    compare(a: String, b: String): Int {
        var i: Int = 0;
        while(i < Math.min(a.length, b.length)) {
            var charComparison: Int = (a.get(i) as Int) - (b.get(i) as Int);
            if(charComparison != 0) {
                return charComparison;
            }
            i = i + 1;
        }

        return a.length - b.length;
    }
}