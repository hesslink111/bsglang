import List;
import MapEntry;
import Hashable;
import IO;
import StringEx;

class Map {
    var bucketList: List;
    var size: Int;

    init(): Void {
        bucketList = new List();
        size = 0;

        var i: Int = 0;
        while(i < 10) {
            bucketList.add(new List() as Any);
            i = i + 1;
        }
    }

    put(key: Hashable, value: Any): Void {
        if(size + 1 > ((bucketList.size * 3) / 4)) {
            rehash(bucketList.size * 2);
        }

        var entry: MapEntry = new MapEntry();
        entry.key = key;
        entry.value = value;
        if(putInBucketList(entry, bucketList)) {
            size = size + 1;
        }
    }

    putInBucketList(entry: MapEntry, bucketListParam: List): Bool {
        var bucket: List = getBucket(entry.key, bucketListParam);

        var i: Int = 0;
        while(i < bucket.size && (bucket.get(i) as MapEntry).key.equals(entry.key) == false) {
            i = i + 1;
        }

        if(i < bucket.size) {
            bucket.set(i, entry as Any);
            return false;
        }
        bucket.add(entry as Any);
        return true;
    }

    getBucket(key: Hashable, bucketListParam: List): List {
        var index: Int = key.hashCode() % bucketListParam.size;
        if(index < 0) {
            index = index + bucketListParam.size;
        }

        return bucketListParam.get(index) as List;
    }

    containsKey(key: Hashable): Bool {
        var bucket: List = getBucket(key, bucketList);

        var i: Int = 0;
        while(i < bucket.size && (bucket.get(i) as MapEntry).key.equals(key) == false) {
            i = i + 1;
        }

        return i < bucket.size;
    }

    get(key: Hashable): Any {
        var bucket: List = getBucket(key, bucketList);

        var i: Int = 0;
        while(i < bucket.size && (bucket.get(i) as MapEntry).key.equals(key) == false) {
            i = i + 1;
        }

        if(i < bucket.size) {
            return (bucket.get(i) as MapEntry).value;
        }
        return 0 as Any;
    }

    remove(key: Hashable): Void {
        var bucket: List = getBucket(key, bucketList);

        var i: Int = 0;
        while(i < bucket.size && (bucket.get(i) as MapEntry).key.equals(key) == false) {
            i = i + 1;
        }

        if(i < bucket.size) {
            bucket.remove(i);
        }

        size = size - 1;
    }

    rehash(newCapacity: Int): Void {
        var newBucketList: List = new List();
        var i: Int = 0;
        while(i < newCapacity) {
            newBucketList.add(new List() as Any);
            i = i + 1;
        }

        i = 0;
        while(i < bucketList.size) {
            var bucket: List = bucketList.get(i) as List;
            var j: Int = 0;
            while(j < bucket.size) {
                var entry: MapEntry = bucket.get(j) as MapEntry;
                putInBucketList(entry, newBucketList);
                j = j + 1;
            }
            i = i + 1;
        }

        bucketList = newBucketList;
    }

    clear(): Void {
        init();
    }
}